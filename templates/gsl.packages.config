.template 0
###############################################################################
# Copyright (c) 2014-2019 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin packages.config.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

###
### packages.config related string generators
###
function project_build_dir_relative_path(repository, product, path_prefix,\
    vs_version)

    define my.repository = project_build_dir_relative_path.repository
    require(my.repository, "repository", "name")
    define my.product = project_build_dir_relative_path.product
    define my.proj_name = project_name(my.product, my.repository)
    define my.subpath = "builds/msvc/$(my.vs_version)"
    return append_path(append_path(append_path(my.path_prefix,\
        canonical_path_name(my.repository)), my.subpath), my.proj_name)
endfunction

function packages_config_file(repository, product, path_prefix, vs_version)
    define my.repository = packages_config_file.repository
    define my.product = packages_config_file.product
    define my.proj_relative_path = project_build_dir_relative_path(\
        my.repository, my.product, my.path_prefix, my.vs_version)

    return append_path(my.proj_relative_path, "packages.config")
endfunction

###
### functional artifact emission
###
function emit_packages(repository, product)
    define my.repository = emit_packages.repository
    require(my.repository, "repository", "name")
    define my.product = emit_packages.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")

    new nuget_dependencies as _nuget
        get_dependencies_nuget(_nuget, generate, my.repository->configure,\
            platform_compiler())

        get_dependencies_nuget(_nuget, generate, my.repository->configure,\
            platform_compiler(), my.product.option)

        if (!defined(my.product.option))
            get_dependencies_nuget(_nuget, generate, my.repository->configure,\
                platform_compiler(), "consensus")
        endif

        for _nuget.element as _element
            require(_element, "element", "name")
            require(_element, "element", "version")

            emit_package_item(_element)
        endfor
    endnew
endfunction

function emit_packages_config(repository, product)
    define my.repository = emit_packages_config.repository
    require(my.repository, "repository", "name")
    define my.product = emit_packages_config.product
    require(my.product, "product", "path")
    require(my.product, "product", "prefix")
    require(my.product, "product", "uuid")

    emit_xml_declaration()
    xml_copyleft(my.repository.name)
    emit_packages_open()
    emit_packages(my.repository, my.product)
    emit_packages_close()
endfunction emit_project

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro emit_xml_declaration()
<?xml version="1.0" encoding="utf-8"?>
.endmacro emit_xml_declaration
.
.macro emit_packages_open()
<packages>
.endmacro emit_packages_open
.
.macro emit_packages_close()
</packages>
.endmacro emit_packages_close
.
.macro emit_package_item(package)
.   define my.package = emit_package_item.package
.   require(my.package, "package", "name")
.   require(my.package, "package", "version")
  <package id="$(my.package.name)" version="$(my.package.version)" targetFramework="Native" />
.endmacro emit_package_item
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_packages_config(path_prefix, generate, vs_version)
    define my.generate = generate_packages_config.generate
    for my.generate.repository as _repository by _repository.name\
        where defined(_repository->make)

        require(_repository, "repository", "name")
        define my.absolute_proj_path = join(join(global.root, my.prefix_path),\
            _repository.name)

        for _repository->make.product as _product where \
            has_uuid(_product) & defined(_product.path)

            define my.proj_dir_name = project_build_dir_relative_path(\
                _repository, _product, my.path_prefix, my.vs_version)

            define my.file = packages_config_file(_repository, _product,\
                my.path_prefix, my.vs_version)

            create_directory(my.proj_dir_name)
            notify(my.file)
            output(my.file)

            emit_packages_config(_repository, _product)

            close
        endfor
    endfor _repository
endfunction # generate_packages_config
.endtemplate
