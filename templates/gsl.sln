.template 0
###############################################################################
# Copyright (c) 2014-2019 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin .sln.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

###
### sln related string generators
###
function solution_relative_path(repository, path_prefix, vs_version)
    define my.repository = solution_relative_path.repository
    require(my.repository, "repository", "name")
    define my.subpath = "builds/msvc/$(my.vs_version)"
    return append_path(append_path(my.path_prefix,\
        canonical_path_name(my.repository)), my.subpath)
endfunction

function solution_file(repository, path_prefix, vs_version)
    define my.repository = solution_file.repository
    require(my.repository, "repository", "name")
    define my.relative_path = solution_relative_path(my.repository,\
        my.path_prefix, my.vs_version)

    return append_path(my.relative_path, "$(my.repository.name).sln")
endfunction

###
### functional artifact emission
###
function emit_projects(repository)
    define my.repository = emit_projects.repository
    require(my.repository, "repository", "name")

    for my.repository->make.product as _product where has_uuid(_product)

        define my.project_name = project_name(_product, my.repository)
        define my.project_path = "$(my.project_name)\\$(my.project_name).vcxproj"

        emit_project(my.project_name, my.project_path, _product.uuid)
    endfor
endfunction

function emit_postsolution(repository)
    define my.repository = emit_postsolution.repository
    require(my.repository, "repository", "name")

    emit_global_postsolution_open()

    for my.repository->make.product as _product where has_uuid(_product)
        define my.project_name = project_name(_product, my.repository)
        define my.project_path = "$(my.project_name)\\$(my.project_name).vcxproj"

        if (is_program(_product))
            emit_binary_crossproduct(_product.uuid)
        elsif (is_library(_product))
            emit_library_crossproduct(_product.uuid)
        else
            abort("Unrecognized product type.")
        endif
    endfor

    emit_global_postsolution_close()
endfunction

function emit_solution(repository)
    define my.repository = emit_solution.repository
    require(my.repository, "repository", "name")

    emit_version()
    emit_projects(my.repository)
    emit_global_open()
    emit_presolution()
    emit_postsolution(my.repository)
    emit_solution_properties()
    emit_global_close()
endfunction emit_solution

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro emit_version()

Microsoft Visual Studio Solution File, Format Version $(format_version())
# Visual Studio $(visual_studio_year())
VisualStudioVersion = $(visual_studio_version())
MinimumVisualStudioVersion = $(visual_studio_version_min())
.endmacro emit_version
.
.macro emit_project(project_name, project_path, uuid)
Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "$(my.project_name)", "$(my.project_path)", "{$(my.uuid:upper)}"
EndProject
.endmacro emit_project
.
.macro emit_global_open()
Global
.endmacro emit_global_open
.
.macro emit_global_close()
EndGlobal
.endmacro emit_global_close
.
.macro emit_presolution()
\tGlobalSection(SolutionConfigurationPlatforms) = preSolution
\t\tStaticDebug|Win32 = StaticDebug|Win32
\t\tStaticDebug|x64 = StaticDebug|x64
\t\tStaticRelease|Win32 = StaticRelease|Win32
\t\tStaticRelease|x64 = StaticRelease|x64
\tEndGlobalSection
.endmacro emit_presolution
.
.macro emit_global_postsolution_open()
\tGlobalSection(ProjectConfigurationPlatforms) = postSolution
.endmacro emit_global_postsolution_open
.
.macro emit_global_postsolution_close()
\tEndGlobalSection
.endmacro emit_global_postsolution_close
.
.macro emit_library_crossproduct(uuid)
\t\t{$(my.uuid:upper)}.StaticDebug|Win32.ActiveCfg = DebugLIB|Win32
\t\t{$(my.uuid:upper)}.StaticDebug|Win32.Build.0 = DebugLIB|Win32
\t\t{$(my.uuid:upper)}.StaticDebug|x64.ActiveCfg = DebugLIB|x64
\t\t{$(my.uuid:upper)}.StaticDebug|x64.Build.0 = DebugLIB|x64
\t\t{$(my.uuid:upper)}.StaticRelease|Win32.ActiveCfg = ReleaseLIB|Win32
\t\t{$(my.uuid:upper)}.StaticRelease|Win32.Build.0 = ReleaseLIB|Win32
\t\t{$(my.uuid:upper)}.StaticRelease|x64.ActiveCfg = ReleaseLIB|x64
\t\t{$(my.uuid:upper)}.StaticRelease|x64.Build.0 = ReleaseLIB|x64
.endmacro emit_library_crossproduct
.
.macro emit_binary_crossproduct(uuid)
\t\t{$(my.uuid:upper)}.StaticDebug|Win32.ActiveCfg = DebugSEXE|Win32
\t\t{$(my.uuid:upper)}.StaticDebug|Win32.Build.0 = DebugSEXE|Win32
\t\t{$(my.uuid:upper)}.StaticDebug|x64.ActiveCfg = DebugSEXE|x64
\t\t{$(my.uuid:upper)}.StaticDebug|x64.Build.0 = DebugSEXE|x64
\t\t{$(my.uuid:upper)}.StaticRelease|Win32.ActiveCfg = ReleaseSEXE|Win32
\t\t{$(my.uuid:upper)}.StaticRelease|Win32.Build.0 = ReleaseSEXE|Win32
\t\t{$(my.uuid:upper)}.StaticRelease|x64.ActiveCfg = ReleaseSEXE|x64
\t\t{$(my.uuid:upper)}.StaticRelease|x64.Build.0 = ReleaseSEXE|x64
.endmacro emit_binary_crossproduct
.
.macro emit_solution_properties()
\tGlobalSection(SolutionProperties) = preSolution
\t\tHideSolutionNode = FALSE
\tEndGlobalSection
.endmacro emit_solution_properties
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_solutions(path_prefix, generate, vs_version)
    define my.generate = generate_solutions.generate
    for my.generate.repository as _repository by _repository.name
        require(_repository, "repository", "name")
        define my.absolute_path = join(join(global.root, my.path_prefix),\
            _repository.name)

        define my.solution_path = solution_relative_path(_repository,\
            my.path_prefix, my.vs_version)

        define my.solution_filename = solution_file(_repository,\
            my.path_prefix, my.vs_version)

        create_directory(my.solution_path)
        notify(my.solution_filename)
        output(my.solution_filename)
        emit_solution(_repository)
        close
    endfor _repository
endfunction # generate_solutions
.endtemplate
