.template 0
###############################################################################
# Copyright (c) 2014-2015 libbitcoin developers (see COPYING).
#
# GSL generate libbitcoin .vcxproj.filters.
#
# This is a code generator built using the iMatix GSL code generation
# language. See https://github.com/imatix/gsl for details.
###############################################################################
# Functions
###############################################################################

###
### uuid manipulation
###
function uuid_init(repository, product)
    define my.repository = uuid_init.repository
    define my.product = uuid_init.product
    return 0
endfunction

function uuid_inc(uuid)
    return my.uuid + 1
endfunction

function to_hex(value)
    define my.hex_value = math.mod(my.value, 16)

    if (my.hex_value >= 0 & my.hex_value <= 9)
        return conv.string(my.hex_value)
    elsif (my.hex_value = 10)
        return "a"
    elsif (my.hex_value = 11)
        return "b"
    elsif (my.hex_value = 12)
        return "c"
    elsif (my.hex_value = 13)
        return "d"
    elsif (my.hex_value = 14)
        return "e"
    elsif (my.hex_value = 15)
        return "f"
    else
        abort("")
    endif
endfunction

function to_uuid(seed, value)
    define my.wip = "0"

    while (my.value > 0)
        my.wip += to_hex(my.value)
        my.value = math.floor(my.value / 16)
    endwhile

    # NOTE: should vary this?
    define my.uuid = left(my.seed, 19)
    my.uuid += "0000-"
    define my.iter = 0

    # NOTE: supports at most 0x0fffffffffff
    while ((my.iter + string.length(my.wip)) < 12)
        my.uuid += 0
        my.iter +=1
    endwhile

    my.uuid += my.wip

    return my.uuid
endfunction

###
### vcxproj related string generators
###
function project_build_dir_relative_path(repository, product, path_prefix,\
    vs_version)

    define my.repository = project_build_dir_relative_path.repository
    require(my.repository, "repository", "name")
    define my.product = project_build_dir_relative_path.product
    define my.proj_name = project_name(my.product, my.repository)
    define my.subpath = "builds/msvc/$(my.vs_version)"
    return append_path(append_path(append_path(my.path_prefix,\
        canonical_path_name(my.repository)), my.subpath), my.proj_name)
endfunction

function project_file(repository, product, path_prefix, vs_version)
    define my.repository = project_file.repository
    define my.product = project_file.product
    define my.proj_relative_path = project_build_dir_relative_path(\
        my.repository, my.product, my.path_prefix, my.vs_version)

    define my.proj_name = project_name(my.product, my.repository)
    return append_path(my.proj_relative_path, "$(my.proj_name).vcxproj.filters")
endfunction

###
### generic assistance functions
###
function discover_directories(data, directory, win_path, value_path, uuid)
    define my.data = discover_directories.data
    define my.directory = discover_directories.directory

    for my.directory.directory as _dir by _dir.name
        if (!starts_with(_dir.name, "."))
            table_add(my.data, make_windows_path(append_path(my.value_path,\
                _dir.name)), my.uuid)
            my.uuid = uuid_inc(my.uuid)
        endif
    endfor

    for my.directory.directory as _dir by _dir.name
        define my.subdir = open_directory(append_path(my.directory.path,\
            _dir.name))
        define my.sub_path = append_path(my.win_path, _dir.name)
        define my.sub_value_path = append_path(my.value_path, _dir.name)

        if (!starts_with(_dir.name, "."))
            my.uuid = discover_directories(my.data, my.subdir, my.sub_path,\
                my.sub_value_path, my.uuid)
        endif
    endfor

    return my.uuid
endfunction

function matches_filetype(file_name, extension)
    return (regexp.match("(^.)(.*)\\.$(my.extension)$", my.file_name) > 0)
endfunction

function is_compiled_type(name)
    return matches_filetype(my.name, "cpp") |\
        matches_filetype(my.name, "c")
endfunction

function is_included_type(name)
    return matches_filetype(my.name, "hpp") |\
        matches_filetype(my.name, "h")
endfunction

function is_none_type(name)
    return matches_filetype(my.name, "ipp")
endfunction

function is_resources_type(name)
    return matches_filetype(my.name, "rc")
endfunction

function is_option_tests(product)
    define my.product = is_option_tests.product
    return defined(my.product.option) & (my.product.option = "tests")
endfunction

function filter_add(filters, item, uuid)
    define my.filters = filter_add.filters
    table_add(my.filters, my.item, my.uuid)
    return uuid_inc(my.uuid)
endfunction

###
### functional artifact emission
###
function emit_declare_filters_item_group(directories, uuid_seed)
    define my.directories = emit_declare_filters_item_group.directories

    emit_item_group_open()

    for my.directories.row as _row by _row.name
        emit_filter_declaration(make_windows_path(_row.name),\
            to_uuid(my.uuid_seed, _row.value))
    endfor

    emit_item_group_close()
endfunction

function emit_item_group_compiler(files, repository, product, vs_version)
    define my.files = emit_item_group_compiler.files
    define my.repository = emit_item_group_compiler.repository
    define my.product = emit_item_group_compiler.product

    if ((my.repository.name = "libbitcoin") |\
        count(my.files.file, is_compiled_type(count.name)) > 0)

        emit_item_group_open()
        emit_item_compile_threadsafe_statistics(my.repository, my.product,\
            my.vs_version)

        for my.files.file as _file by _file.relative_name
            if (is_compiled_type(_file.name))
                emit_item_compile_filtered(_file.relative_name, _file.tag)
            endif
        endfor

        emit_item_group_close()
    endif
endfunction

function emit_item_group_includes(files)
    define my.files = emit_item_group_includes.files

    if (count(my.files.file, is_included_type(count.name)) > 0)
        emit_item_group_open()

        for my.files.file as _file by _file.relative_name
            if (is_included_type(_file.name))
                emit_item_include_filtered(_file.relative_name, _file.tag)
            endif
        endfor

        emit_item_group_close()
    endif
endfunction

function emit_item_group_none(files)
    define my.files = emit_item_group_none.files

    emit_item_group_open()

    for my.files.file as _file by _file.relative_name
        if (is_none_type(_file.name))
            emit_item_none_filtered(_file.relative_name, _file.tag)
        endif
    endfor

    emit_item_none("packages.config")

    emit_item_group_close()
endfunction

function emit_item_group_resources(files)
    define my.files = emit_item_group_resources.files

    if (count(my.files.file, is_resources_type(count.name)) > 0)
        emit_item_group_open()

        for my.files.file as _file by _file.relative_name
            if (is_resources_type(_file.name))
                emit_item_resource_filtered(_file.relative_name, _file.tag)
            endif
        endfor

        emit_item_group_close()
    endif
endfunction

function emit_filter(repository, product, vs_version, project_path)
    define my.repository = emit_filter.repository
    define my.product = emit_filter.product
    require(my.product, "product", "path")
    require(my.product, "product", "uuid")

    emit_xml_declaration()
    xml_copyleft(my.repository.name)
    emit_project_open(msbuild_version(my.product))

    new directories as _directories
        new files as _files
            define my.product_prefix = "../../../../$(my.product.path)"
            define my.product_path = "$(my.project_path)/$(my.product.path)"
            define my.product_dir = open_directory(my.product_path)
            define my.product_winpath = "$(my.product.path)"
            define my.uuid = uuid_init(my.repository, my.product)

            my.uuid = filter_add(_directories, "src", my.uuid)

            my.uuid = discover_directories(_directories, my.product_dir,\
                my.product_winpath, "src", my.uuid)

            get_files(_files, my.product_dir, my.product_prefix, "src",\
                "true", "true", "true")

            if (is_library(my.product))
                define my.include_prefix = "../../../../include"
                define my.include_path = "$(my.project_path)/include"
                define my.include_dir = open_directory(my.include_path)
                define my.include_winpath = "include"

                my.uuid = filter_add(_directories, my.include_winpath, my.uuid)

                my.uuid = discover_directories(_directories, my.include_dir,\
                    my.include_winpath, my.include_winpath, my.uuid)

                get_files(_files, my.include_dir, my.include_prefix,\
                    my.include_winpath, "true", "true", "true")
            endif


            if (is_library(my.product) |\
                (is_program(my.product) & !is_option_tests(my.product)))

                define my.resources_prefix = "../.."
                define my.resources_path = "$(my.project_path)/builds/msvc"
                define my.resources_dir = open_directory(my.resources_path)
                define my.resources_winpath = "resource"

                my.uuid = filter_add(_directories, my.resources_winpath, my.uuid)

                get_files(_files, my.resources_dir, my.resources_prefix,\
                    my.resources_winpath, "false", "true", "true")
            endif

            if (requires_threadsafe_statistics(my.repository, my.product,\
                my.vs_version))

                my.uuid = filter_add(_directories, "src/external", my.uuid)
            endif

            emit_declare_filters_item_group(_directories, my.product.uuid)
            emit_item_group_compiler(_files, my.repository, my.product,\
                my.vs_version)

            emit_item_group_includes(_files)
            emit_item_group_none(_files)
            emit_item_group_resources(_files)
        endnew
    endnew

    emit_project_close()
endfunction

###############################################################################
# Macros
###############################################################################
.endtemplate
.template 1
.
.macro emit_xml_declaration()
<?xml version="1.0" encoding="utf-8"?>
.endmacro emit_xml_declaration
.
.macro emit_project_open(version)
<Project DefaultTargets="Build" ToolsVersion="$(my.version)" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
.endmacro emit_project_open
.
.macro emit_project_close()
</Project>
.endmacro emit_project_close
.
.macro emit_item_group_open()
  <ItemGroup>
.endmacro emit_item_group_open
.
.macro emit_item_group_close()
  </ItemGroup>
.endmacro emit_item_group_close
.
.macro emit_filter_declaration(name, uuid)
    <Filter Include="$(my.name)">
      <UniqueIdentifier>{$(my.uuid:upper)}</UniqueIdentifier>
    </Filter>
.endmacro emit_filter_declaration
.
.macro emit_item_filter(name)
      <Filter>$(my.name)</Filter>
.endmacro
.
.macro emit_item_compile_filtered(include, filter_path)
.   emit_item_filtered("ClCompile", my.include, my.filter_path)
.endmacro emit_item_compile_filtered
.
.macro emit_item_include_filtered(include, filter_path)
.   emit_item_filtered("ClInclude", my.include, my.filter_path)
.endmacro emit_item_include_filtered
.
.macro emit_item_none_filtered(include, filter_path)
.   emit_item_filtered("None", my.include, my.filter_path)
.endmacro emit_item_none_filtered
.
.macro emit_item_resource_filtered(include, filter_path)
.   emit_item_filtered("ResourceCompile", my.include, my.filter_path)
.endmacro emit_item_resource_filtered
.
.macro emit_item_filtered(type, include, filter_path)
    <$(my.type) Include="$(make_windows_path(my.include))">
.   emit_item_filter(make_windows_path(my.filter_path))
    </$(my.type)>
.endmacro emit_item_filtered
.
.macro emit_item_compile(include)
.   emit_item("ClCompile", my.include)
.endmacro emit_item_compile
.
.macro emit_item_include(include)
.   emit_item("ClInclude", my.include)
.endmacro emit_item_include
.
.macro emit_item_none(include)
.   emit_item("None", my.include)
.endmacro emit_item_none
.
.macro emit_item_resource(include)
.   emit_item("ResourceCompile", my.include)
.endmacro emit_item_resource
.
.macro emit_item(type, include)
    <$(my.type) Include="$(my.include)" />
.endmacro emit_item
.
.macro emit_item_compile_threadsafe_statistics(repository, product, vs_version)
.   define my.repository = emit_item_compile_threadsafe_statistics.repository
.   define my.product = emit_item_compile_threadsafe_statistics.product
.   define my.item = "\$(VC_CTP_Nov2013_InstallDir)/crt/src/threadsafestatics.cpp"
.   define my.filter = "src/external"
.   if (requires_threadsafe_statistics(my.repository, my.product, my.vs_version))
.       emit_item_compile_filtered(my.item, my.filter)
.   endif
.endmacro emit_item_compile_threadsafe_statistics
.
.endtemplate
.template 0
###############################################################################
# Generation
###############################################################################
function generate_filter(path_prefix, generate, vs_version)
    define my.generate = generate_filter.generate
    for my.generate.repository as _repository by _repository.name\
        where defined(_repository->make)

        require(_repository, "repository", "name")
        define my.absolute_project_path = append_path(global.root,\
            canonical_path_name(_repository))

        for _repository->make.product as _product where \
            has_uuid(_product) & defined(_product.path)

            define my.proj_dir_name = project_build_dir_relative_path(\
                _repository, _product, my.path_prefix, my.vs_version)

            define my.proj_file = project_file(_repository, _product,\
                my.path_prefix, my.vs_version)

            create_directory(my.proj_dir_name)
            notify(my.proj_file)
            output(my.proj_file)

            emit_filter(_repository, _product, my.vs_version,\
                my.absolute_project_path)

            close
        endfor
    endfor _repository
endfunction # generate_vcxproj
.endtemplate
